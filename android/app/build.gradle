def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"


def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    compileSdkVersion 33

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }


    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 33
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
        resConfigs 'en'
    }

    signingConfigs {
        beitunia_release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
            storePassword keystoreProperties['storePassword']
        }

        beitjala_release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
            storePassword keystoreProperties['storePassword']
        }
    }

    buildTypes {
        release {
            debuggable false
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.beitunia_release
            applicationVariants.all { variant ->
                variant.outputs.all {
                    def formattedDate = new Date().format('yyyyMMdd')
                    outputFileName = "municipality_${variant.name}_${variant.versionName}_${variant.versionCode}_${formattedDate}.apk"
                }
            }
        }

        debug {
            debuggable true
            minifyEnabled false
            shrinkResources false

        }
    }

    flavorDimensions "client", "server"
    productFlavors {

        beitjala {
            resValue "string", "app_name", "Beitjala"

            dimension "client"
            applicationId "ps.beitjala.municipality.release"
            def versionMajor = 1
            def versionMinor = 0
            def versionPatch = 0
            def versionClassifier = null
            def isSnapshot = true
            signingConfig signingConfigs.beitjala_release
            versionCode flutterVersionCode.toInteger()
            versionName flutterVersionName
        }

        beitunia {
            resValue "string", "app_name", "Beitunia"
            dimension "client"
            applicationId "ps.beitunia.municipality"
            def versionMajor = 1
            def versionMinor = 0
            def versionPatch = 0
            def versionClassifier = null
            def isSnapshot = true
            signingConfig signingConfigs.beitunia_release

            versionCode flutterVersionCode.toInteger()
            versionName flutterVersionName
        }

        staging {
            dimension "server"
        }

        production {
            dimension "server"
        }
    }
    lint {
        checkReleaseBuilds false
        disable 'InvalidPackage'
    }
    namespace 'com.example.municipality_app'
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}
